int savedSourcePosition = 0;
int savedDestinationPosition = 0;
string[] translationOptions;
string[] translationTypes;
string userLanguage = "";

string getUserLanguage() {
    if (userLanguage != "") {
        return userLanguage;
    }

    userLanguage = input_box("User Language", "Please enter your native language (e.g., Portuguese from Brazil, Portuguese from Portugal, Spanish, etc.).\nLeave empty for English:");
    if (userLanguage == "") {
        userLanguage = "English";
    }
    
    return userLanguage;
}

string readFile(const string &in filePath) {
    file f;
    if (f.open(filePath, "r")) {
        string content = f.read();
        f.close();
        return content;
    }
    return "";
}

bool writeFile(const string &in filePath, const string &in content) {
    file f;
    if (f.open(filePath, "w")) {
        f.write(content);
        f.close();
        return true;
    }
    return false;
}

void parseTranslations(const string &in translatedText, int translationsList) {
    translationOptions.resize(0);
    translationTypes.resize(0);
    form.clear_list(translationsList);
    
    string defaultType = (userLanguage.find("Portuguese") != -1 || userLanguage.find("Português") != -1) ? "Padrão" : "Standard";
    
    if (translatedText.find("|||") == -1) {
        string cleanText = translatedText;
        string translationType = defaultType;
        
        if (cleanText.find("###") == 0) {
            int endDelimiter = cleanText.find("###", 3);
            if (endDelimiter != -1) {
                translationType = cleanText.substr(3, endDelimiter - 3);
                cleanText = cleanText.substr(endDelimiter + 3);
                if (cleanText.find(" ") == 0) {
                    cleanText = cleanText.substr(1);
                }
            }
        }
        
        translationOptions.insert_last(cleanText);
        translationTypes.insert_last(translationType);
        form.add_list_item(translationsList, translationType + ": " + cleanText);
    } else {
        string[] translations = translatedText.split("|||", false);
        for (int i = 0; i < translations.length(); i++) {
            string currentTranslation = translations[i];
            string translationType = "Option " + (i + 1);
            
            if (currentTranslation.find("###") != -1) {
                int startDelimiter = currentTranslation.find("###");
                int endDelimiter = currentTranslation.find("###", startDelimiter + 3);
                if (startDelimiter != -1 && endDelimiter != -1 && endDelimiter > startDelimiter) {
                    translationType = currentTranslation.substr(startDelimiter + 3, endDelimiter - startDelimiter - 3);
                    currentTranslation = currentTranslation.substr(endDelimiter + 3);
                    if (currentTranslation.find(" ") == 0) {
                        currentTranslation = currentTranslation.substr(1);
                    }
                }
            }
            
            translationOptions.insert_last(currentTranslation);
            translationTypes.insert_last(translationType);
            form.add_list_item(translationsList, translationType + ": " + currentTranslation);
        }
    }
}

string getSelectedTranslation(int translationsList) {
    int selectedIndex = form.get_list_position(translationsList);
    if (selectedIndex >= 0 && selectedIndex < translationOptions.length()) {
        return translationOptions[selectedIndex];
    }
    return "";
}

string requestURL(const string &in url, const string &in body = "") {
    internet_request r;
    r.set_url(url);
    r.set_header("Content-Type", "application/json");
    if (body != "") {
        r.set_payload(body);
    }
    r.perform();
    while (!r.complete) {
        wait(1);
    }
    return r.response_body;
}

bool loadConfiguration() {
    string configData = readFile("configs.json");
    string apiKey = "";
    
    if (configData != "") {
        try {
            json_object@ config = parse_json(configData);
            
            if (config.exists("api_key")) {
                apiKey = config["api_key"];
            }
            if (config.exists("source_position")) {
                savedSourcePosition = config["source_position"];
            }
            if (config.exists("destination_position")) {
                savedDestinationPosition = config["destination_position"];
            }
            if (config.exists("user_language")) {
                userLanguage = config["user_language"];
            }
        } catch {
        }
    }
    
    if (apiKey == "") {
        apiKey = input_box("API Key Required", "Please enter your Gemini API key:");
        if (apiKey == "") {
            alert("Error", "API key not provided.");
            return false;
        }
    }

    getUserLanguage();
    translator.setApiKey(apiKey);
    saveConfiguration();
    return true;
}

void saveConfiguration() {
    json_object config;
    config["api_key"] = translator.getApiKey();
    config["source_position"] = savedSourcePosition;
    config["destination_position"] = savedDestinationPosition;
    config["user_language"] = userLanguage;
    
    string jsonString = config.stringify();
    writeFile("configs.json", jsonString);
}

void updateLanguagePositions(int sourcePos, int targetPos) {
    savedSourcePosition = sourcePos;
    savedDestinationPosition = targetPos;
    saveConfiguration();
}

void applyLanguagePositions(int list1, int list2) {
    form.set_list_position(list1, savedSourcePosition);
    form.set_list_position(list2, savedDestinationPosition);
}